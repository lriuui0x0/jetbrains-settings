<application>
  <component name="VimEditorSettings">
    <editor>
      <key-repeat enabled="true" />
    </editor>
  </component>
  <component name="VimHistorySettings">
    <history>
      <history-search>
        <entry encoding="base64">XDxtZXJnZVw+</entry>
        <entry encoding="base64">XDxlXD4=</entry>
        <entry encoding="base64">XDxmaXJzdFw+</entry>
        <entry encoding="base64">XDxzdGFja19pbmRleFw+</entry>
        <entry>on_stack</entry>
        <entry encoding="base64">IA==</entry>
        <entry encoding="base64">XDxzY2NfZGF0YVw+</entry>
        <entry encoding="base64">XDxzdGFja190b3BcPg==</entry>
        <entry encoding="base64">XDxmaXJzdF9jb21wb25lbnRcPg==</entry>
        <entry encoding="base64">XDxyb290XD4=</entry>
        <entry encoding="base64">XDxtYXRoXD4=</entry>
        <entry encoding="base64">XDxjaGFyX2V4dGVudFw+</entry>
        <entry>\</entry>
        <entry encoding="base64">XDxnZXRfb3V0ZXJfZXh0ZW50XD4=</entry>
        <entry>typeset</entry>
        <entry encoding="base64">XDx3aWR0aFw+</entry>
        <entry encoding="base64">XDxoZWlnaHRcPg==</entry>
        <entry encoding="base64">XDxpXD4=</entry>
        <entry encoding="base64">XDxzY2NfY291bnRcPg==</entry>
        <entry encoding="base64">XDxvcmRlclw+</entry>
      </history-search>
      <history-cmd>
        <entry>call Build()</entry>
        <entry>ws</entry>
        <entry>@w</entry>
        <entry>wb</entry>
        <entry>s</entry>
        <entry>call OpenTerminal()</entry>
        <entry encoding="base64">JzwsJz53</entry>
        <entry encoding="base64">dyA=</entry>
        <entry>Lq</entry>
        <entry>ew</entry>
        <entry>w3</entry>
        <entry>W</entry>
        <entry>@q</entry>
        <entry>w#</entry>
        <entry>wq</entry>
        <entry>we</entry>
        <entry>q</entry>
        <entry>Lw</entry>
        <entry>wk</entry>
        <entry>w</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
  </component>
  <component name="VimKeySettings">
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed J</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed K</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed L</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>shift ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>shift ctrl pressed 6</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed SEMICOLON</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>shift ctrl pressed SEMICOLON</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed J</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed BACK_SPACE</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed Z</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed COMMA</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed L</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
  <component name="VimMarksSettings">
    <globalmarks />
    <filemarks>
      <file name="/Dummy.txt" timestamp="1615659405591">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="^" line="0" column="2" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/CSES/data.txt" timestamp="1615839489100">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="2" column="3" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/CSES/Graph-Algorithms/Road-Construction.cpp" timestamp="1615662636599">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="1" column="10" />
        <mark key="]" line="1" column="16" />
        <mark key="." line="1" column="15" />
        <mark key="^" line="1" column="16" />
      </file>
      <file name="/a.dummy" timestamp="1615754577553">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/CSES/Graph-Algorithms/Flight-Routes-Check.cpp" timestamp="1615657315514">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="28" column="1" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/HCM/synth/katex/temml/temml.css" timestamp="1615671742719">
        <mark key="[" line="25" column="0" />
        <mark key="]" line="7" column="1" />
        <mark key="^" line="7" column="1" />
        <mark key="." line="25" column="0" />
      </file>
      <file name="$USER_HOME$/CSES/Graph-Algorithms/Planets-Cycles.cpp" timestamp="1615584922924">
        <mark key="'" line="74" column="4" />
        <mark key="[" line="1" column="65" />
        <mark key="]" line="1" column="74" />
        <mark key="." line="1" column="73" />
        <mark key="^" line="1" column="74" />
      </file>
      <file name="$USER_HOME$/HCM/.gitignore" timestamp="1615508388302">
        <mark key="[" line="11" column="19" />
        <mark key="]" line="11" column="23" />
        <mark key="." line="11" column="22" />
        <mark key="^" line="11" column="23" />
      </file>
      <file name="$USER_HOME$/CSES/Graph-Algorithms/Round-Trip-II.cpp" timestamp="1615632647993">
        <mark key="'" line="3" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="5" column="0" />
      </file>
      <file name="$USER_HOME$/HCM/synth/katex/latex.json" timestamp="1615672408627">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="332461" />
      </file>
      <file name="$USER_HOME$/HCM/synth/katex/tomml.cjs.js" timestamp="1615507370279">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="11136" column="79" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" timestamp="1615839843605">
        <mark key="'" line="10" column="0" />
        <mark key="[" line="31" column="44" />
        <mark key="]" line="31" column="45" />
        <mark key="." line="31" column="44" />
        <mark key="^" line="31" column="45" />
      </file>
      <file name="$USER_HOME$/CSES/Graph-Algorithms/Planets-and-Kingdoms.cpp" timestamp="1615683594312">
        <mark key="'" line="36" column="0" />
        <mark key="[" line="28" column="52" />
        <mark key="]" line="28" column="52" />
        <mark key="." line="28" column="52" />
        <mark key="^" line="28" column="37" />
      </file>
      <file name="$USER_HOME$/HCM/synth/katex/temml/temml-dual.css" timestamp="1615672293729">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/HCM/synth/katex/mathpix.py" timestamp="1615506259498">
        <mark key="'" line="4" column="37" />
        <mark key="[" line="4" column="25" />
        <mark key="]" line="4" column="36" />
        <mark key="." line="4" column="35" />
        <mark key="^" line="4" column="36" />
      </file>
      <file name="$USER_HOME$/HCM/synth/katex/katex.js" timestamp="1615508359884">
        <mark key="'" line="9" column="17" />
        <mark key="[" line="26" column="0" />
        <mark key="]" line="26" column="0" />
        <mark key="." line="26" column="0" />
        <mark key="^" line="7" column="80" />
      </file>
      <file name="$USER_HOME$/HCM/synth/katex/temml/index.html" timestamp="1615672665531">
        <mark key="[" line="15" column="21" />
        <mark key="]" line="15" column="21" />
        <mark key="." line="15" column="20" />
        <mark key="^" line="15" column="21" />
      </file>
      <file name="$USER_HOME$/CSES/lib.cpp" timestamp="1615839335103">
        <mark key="'" line="1495" column="8" />
        <mark key="[" line="1542" column="0" />
        <mark key="]" line="1542" column="0" />
        <mark key="." line="1542" column="0" />
      </file>
      <file name="$USER_HOME$/CSES/Graph-Algorithms/Road-Reparation.cpp" timestamp="1615636562504">
        <mark key="'" line="7" column="0" />
        <mark key="[" line="4" column="0" />
        <mark key="]" line="43" column="1" />
        <mark key="." line="4" column="21" />
        <mark key="^" line="23" column="17" />
      </file>
      <file name="$USER_HOME$/HCM/synth/katex/mathjax.html" timestamp="1615761624958">
        <mark key="'" line="72" column="20" />
        <mark key="[" line="81" column="0" />
        <mark key="]" line="82" column="56" />
        <mark key="." line="81" column="0" />
        <mark key="^" line="56" column="25" />
      </file>
    </filemarks>
    <jumps>
      <jump line="12" column="4" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="13" column="3" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="14" column="3" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="15" column="3" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="16" column="3" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="17" column="3" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="18" column="4" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="19" column="3" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="23" column="0" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="2" column="0" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="3" column="2" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="22" column="2" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="1" column="0" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="45" column="51" filename="$USER_HOME$/CSES/Graph-Algorithms/Road-Construction.cpp" />
      <jump line="1510" column="0" filename="$USER_HOME$/CSES/lib.cpp" />
      <jump line="20" column="4" filename="$USER_HOME$/CSES/Graph-Algorithms/Road-Construction.cpp" />
      <jump line="16" column="4" filename="$USER_HOME$/CSES/Graph-Algorithms/Road-Construction.cpp" />
      <jump line="1492" column="0" filename="$USER_HOME$/CSES/lib.cpp" />
      <jump line="20" column="0" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="1505" column="18" filename="$USER_HOME$/CSES/lib.cpp" />
      <jump line="1519" column="9" filename="$USER_HOME$/CSES/lib.cpp" />
      <jump line="1506" column="61" filename="$USER_HOME$/CSES/lib.cpp" />
      <jump line="1481" column="0" filename="$USER_HOME$/CSES/lib.cpp" />
      <jump line="1509" column="0" filename="$USER_HOME$/CSES/lib.cpp" />
      <jump line="22" column="8" filename="$USER_HOME$/CSES/Graph-Algorithms/Road-Construction.cpp" />
      <jump line="55" column="37" filename="$USER_HOME$/CSES/Graph-Algorithms/Road-Construction.cpp" />
      <jump line="26" column="40" filename="$USER_HOME$/CSES/Graph-Algorithms/Road-Construction.cpp" />
      <jump line="21" column="0" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="63" column="0" filename="$USER_HOME$/CSES/Graph-Algorithms/Road-Construction.cpp" />
      <jump line="0" column="0" filename="$USER_HOME$/CSES/Graph-Algorithms/Road-Construction.cpp" />
      <jump line="22" column="31" filename="$USER_HOME$/CSES/Graph-Algorithms/Planets-and-Kingdoms.cpp" />
      <jump line="28" column="4" filename="$USER_HOME$/CSES/Graph-Algorithms/Planets-and-Kingdoms.cpp" />
      <jump line="24" column="4" filename="$USER_HOME$/CSES/Graph-Algorithms/Planets-and-Kingdoms.cpp" />
      <jump line="25" column="5" filename="$USER_HOME$/CSES/Graph-Algorithms/Planets-and-Kingdoms.cpp" />
      <jump line="33" column="49" filename="$USER_HOME$/CSES/Graph-Algorithms/Planets-and-Kingdoms.cpp" />
      <jump line="34" column="4" filename="$USER_HOME$/CSES/Graph-Algorithms/Planets-and-Kingdoms.cpp" />
      <jump line="32" column="4" filename="$USER_HOME$/CSES/Graph-Algorithms/Planets-and-Kingdoms.cpp" />
      <jump line="4" column="3" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="30" column="0" filename="$USER_HOME$/CSES/Graph-Algorithms/Planets-and-Kingdoms.cpp" />
      <jump line="0" column="0" filename="$USER_HOME$/CSES/Graph-Algorithms/Planets-and-Kingdoms.cpp" />
      <jump line="36" column="0" filename="$USER_HOME$/CSES/Graph-Algorithms/Planets-and-Kingdoms.cpp" />
      <jump line="9" column="101" filename="$USER_HOME$/HCM/synth/katex/temml/index.html" />
      <jump line="8" column="0" filename="$USER_HOME$/HCM/synth/katex/temml/temml-dual.css" />
      <jump line="15" column="0" filename="$USER_HOME$/HCM/synth/katex/temml/temml-dual.css" />
      <jump line="49" column="0" filename="$USER_HOME$/HCM/synth/katex/temml/temml-dual.css" />
      <jump line="0" column="0" filename="$USER_HOME$/HCM/synth/katex/temml/temml-dual.css" />
      <jump line="0" column="0" filename="$USER_HOME$/HCM/synth/katex/latex.json" />
      <jump line="12" column="4" filename="$USER_HOME$/HCM/synth/katex/temml/index.html" />
      <jump line="10" column="16" filename="$USER_HOME$/HCM/synth/katex/temml/index.html" />
      <jump line="13" column="33" filename="$USER_HOME$/HCM/synth/katex/temml/index.html" />
      <jump line="8" column="0" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="23" column="50" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="22" column="63" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="19" column="35" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="28" column="43" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="24" column="37" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="25" column="36" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="26" column="38" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="27" column="39" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="52" column="225" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="65" column="34" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="36" column="12" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="82" column="9" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="35" column="8" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="30" column="35" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="21" column="19" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="86" column="203" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="90" column="4" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="85" column="54" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="84" column="4" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="87" column="8" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="18" column="8" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="37" column="16" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="39" column="16" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="83" column="9" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="43" column="16" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="77" column="20" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="56" column="24" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="67" column="20" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="57" column="24" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="68" column="20" filename="$USER_HOME$/HCM/synth/katex/mathjax.html" />
      <jump line="7" column="0" filename="$USER_HOME$/CSES/data.txt" />
      <jump line="38" column="20" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="43" column="4" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="47" column="4" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="39" column="4" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="1495" column="8" filename="$USER_HOME$/CSES/lib.cpp" />
      <jump line="31" column="8" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="33" column="24" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="32" column="24" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="48" column="24" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="37" column="72" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="51" column="4" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="49" column="4" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="36" column="9" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="34" column="35" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="35" column="4" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="54" column="0" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="10" column="0" filename="$USER_HOME$/CSES/Graph-Algorithms/Coin-Collector.cpp" />
      <jump line="0" column="0" filename="$USER_HOME$/CSES/data.txt" />
    </jumps>
  </component>
  <component name="VimRegisterSettings">
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64">ICAgICAgICAK</text>
      </register>
      <register name="f" type="4">
        <text>_</text>
      </register>
      <register name="+" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="l" type="4">
        <text />
      </register>
      <register name="-" type="4">
        <text>scc_graph</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxvcmRlclw+</text>
      </register>
      <register name="o" type="4">
        <keys>
          <key char="65535" code="91" mods="130" />
        </keys>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgIHdyaXRlX2Zvcm1hdCgiaGVsbG9cbiIpOwo=</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgICAgICAK</text>
      </register>
      <register name="q" type="4">
        <keys>
          <key char="102" code="0" mods="0" />
          <key char="95" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="94" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
        </keys>
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgIHdyaXRlCg==</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgIHdyaXRlX2Zvcm1hdCgiJWxkICVsZFxuIiwgc2NjX2dyYXBoLT52ZXJ0ZXhfY291bnQsIHNjY19ncmFwaC0+ZWRnZV9jb3VudCk7Cg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">NCA0CjQgNSAyIDcKMSAyCjIgMQoxIDMKMiA0Cg==</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgICAgICB7fQo=</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgIHdyaXRlX2Zvcm1hdCgiaGVsbG9cbiIpOwo=</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgIHdyaXRlX2Zvcm1hdCgiaGVsbG9cbiIpOwo=</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ICAgIHdyaXRlX2Zvcm1hdCgiaGVsbG9cbiIpOwo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgIHdyaXRlX2Zvcm1hdCgiaGVsbG9cbiIpOwo=</text>
      </register>
      <register name=":" type="4">
        <text>w</text>
      </register>
    </registers>
  </component>
  <component name="VimSearchSettings">
    <search>
      <last-search encoding="base64">XDxvcmRlclw+</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxvcmRlclw+</last-pattern>
      <last-replace>~</last-replace>
      <last-substitute encoding="base64">XDxzbmFwc2hvdFw+</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
  </component>
  <component name="VimSettings">
    <state version="6" enabled="true" />
    <notifications>
      <idea-join enabled="true" />
      <idea-put enabled="false" />
    </notifications>
  </component>
</application>