<application>
  <component name="VimEditorSettings">
    <editor>
      <key-repeat enabled="true" />
    </editor>
  </component>
  <component name="VimHistorySettings">
    <history>
      <history-search>
        <entry encoding="base64">XDxydW5uaW5nSm9ic1w+</entry>
        <entry encoding="base64">XDxjb21wZW5zYXRlXD4=</entry>
        <entry encoding="base64">XDxmdXR1cmVzXD4=</entry>
        <entry>'offset' and 'limit' can be used together to restrict the answer set</entry>
        <entry>Exe</entry>
        <entry encoding="base64">XDxmb3JrSm9pblBvb2xcPg==</entry>
        <entry>producer</entry>
        <entry encoding="base64">XDxjb21iaW5lZEFuc3dlcnNcPg==</entry>
        <entry encoding="base64">XDxmdXR1cmVcPg==</entry>
        <entry encoding="base64">XDxwcm9kdWNlZFw+</entry>
        <entry>recycle</entry>
        <entry>the size of answewr</entry>
        <entry>is still</entry>
        <entry>still</entry>
        <entry>not</entry>
        <entry encoding="base64">XDxub3RcPg==</entry>
        <entry encoding="base64">XDxjMVw+</entry>
        <entry encoding="base64">XDxpc0RvbmVcPg==</entry>
        <entry>done</entry>
        <entry>put</entry>
      </history-search>
      <history-cmd>
        <entry>wjjj:w</entry>
        <entry>3</entry>
        <entry>www</entry>
        <entry>wwwll:w</entry>
        <entry>q:q</entry>
        <entry>w]</entry>
        <entry>s</entry>
        <entry>ww:w</entry>
        <entry>vs</entry>
        <entry>.w</entry>
        <entry>we</entry>
        <entry>wq</entry>
        <entry>cnext</entry>
        <entry>ww</entry>
        <entry>qq</entry>
        <entry>w\</entry>
        <entry encoding="base64">JzwsJz53</entry>
        <entry>W</entry>
        <entry>q</entry>
        <entry>w</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
  </component>
  <component name="VimKeySettings">
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed J</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed K</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed L</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>shift ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>shift ctrl pressed 6</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed SEMICOLON</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>shift ctrl pressed SEMICOLON</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed J</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed BACK_SPACE</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed Z</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed COMMA</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed L</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
  <component name="VimMarksSettings">
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" timestamp="1610029288162">
        <mark key="'" line="873" column="22" />
        <mark key="[" line="885" column="0" />
        <mark key="]" line="885" column="0" />
        <mark key="." line="885" column="0" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/rocks/RocksGrakn.java" timestamp="1610015737996">
        <mark key="[" line="38" column="43" />
        <mark key="]" line="38" column="44" />
        <mark key="." line="38" column="43" />
        <mark key="^" line="38" column="44" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/common/iterator/DistinctIterator.java" timestamp="1609951615597">
        <mark key="[" line="27" column="4" />
        <mark key="]" line="27" column="11" />
        <mark key="." line="27" column="10" />
        <mark key="^" line="27" column="11" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/common/concurrent/ExecutorService.java" timestamp="1609945784757">
        <mark key="'" line="45" column="12" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/test/integration/traversal/TraversalTest.java" timestamp="1609950831783">
        <mark key="'" line="76" column="63" />
        <mark key="[" line="76" column="97" />
        <mark key="]" line="76" column="104" />
        <mark key="." line="76" column="103" />
        <mark key="^" line="76" column="104" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/reasoner/Reasoner.java" timestamp="1610032643063">
        <mark key="[" line="72" column="13" />
        <mark key="]" line="72" column="12" />
        <mark key="." line="72" column="11" />
        <mark key="^" line="72" column="12" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/rocks/RocksDatabase.java" timestamp="1609945293227">
        <mark key="'" line="86" column="12" />
        <mark key="[" line="387" column="0" />
        <mark key="]" line="387" column="36" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/common/producer/FilteredProducer.java" timestamp="1610031989166">
        <mark key="[" line="58" column="48" />
        <mark key="]" line="58" column="48" />
        <mark key="^" line="51" column="28" />
        <mark key="." line="58" column="48" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" timestamp="1610033039129">
        <mark key="'" line="90" column="0" />
        <mark key="[" line="64" column="0" />
        <mark key="]" line="64" column="0" />
        <mark key="." line="64" column="0" />
        <mark key="^" line="79" column="69" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/test/behaviour/debug/debug.feature" timestamp="1610029590301">
        <mark key="'" line="89" column="0" />
        <mark key="[" line="19" column="0" />
        <mark key="]" line="55" column="0" />
        <mark key="." line="19" column="0" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/traversal/procedure/VertexProcedure.java" timestamp="1610018133691">
        <mark key="'" line="39" column="13" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/traversal/procedure/GraphProcedure.java" timestamp="1610031811898">
        <mark key="'" line="137" column="0" />
        <mark key="[" line="76" column="41" />
        <mark key="]" line="76" column="41" />
        <mark key="^" line="76" column="41" />
        <mark key="." line="76" column="40" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphIterator.java" timestamp="1609951631049">
        <mark key="'" line="38" column="0" />
        <mark key="[" line="38" column="0" />
        <mark key="]" line="38" column="0" />
        <mark key="." line="38" column="0" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/traversal/producer/VertexProducer.java" timestamp="1610019529238">
        <mark key="'" line="40" column="12" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/common/producer/ProducerBuffer.java" timestamp="1610032538903">
        <mark key="'" line="100" column="57" />
      </file>
      <file name="/Dummy.txt" timestamp="1610026897230">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/traversal/Traversal.java" timestamp="1610018681906">
        <mark key="'" line="110" column="68" />
        <mark key="[" line="110" column="45" />
        <mark key="]" line="110" column="45" />
        <mark key="." line="110" column="45" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/common/producer/BaseProducer.java" timestamp="1610019508823">
        <mark key="'" line="47" column="4" />
        <mark key="[" line="20" column="0" />
        <mark key="]" line="20" column="0" />
        <mark key="." line="20" column="0" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn/test/behaviour/graql/GraqlSteps.java" timestamp="1610029504525">
        <mark key="'" line="153" column="40" />
        <mark key="[" line="154" column="0" />
        <mark key="]" line="154" column="0" />
        <mark key="." line="154" column="0" />
      </file>
      <file name="/fragment.java" timestamp="1610033585966">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="2" column="8" />
        <mark key="^" line="2" column="8" />
        <mark key="." line="2" column="7" />
      </file>
    </filemarks>
    <jumps>
      <jump line="114" column="13" filename="$USER_HOME$/GraknLabs/grakn/traversal/Traversal.java" />
      <jump line="107" column="36" filename="$USER_HOME$/GraknLabs/grakn/traversal/Traversal.java" />
      <jump line="110" column="68" filename="$USER_HOME$/GraknLabs/grakn/traversal/Traversal.java" />
      <jump line="38" column="25" filename="$USER_HOME$/GraknLabs/grakn/common/producer/BaseProducer.java" />
      <jump line="31" column="49" filename="$USER_HOME$/GraknLabs/grakn/common/producer/BaseProducer.java" />
      <jump line="44" column="4" filename="$USER_HOME$/GraknLabs/grakn/common/producer/BaseProducer.java" />
      <jump line="41" column="15" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/VertexProducer.java" />
      <jump line="31" column="36" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/VertexProducer.java" />
      <jump line="39" column="12" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/VertexProducer.java" />
      <jump line="40" column="12" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/VertexProducer.java" />
      <jump line="61" column="0" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="41" column="39" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="45" column="93" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="106" column="113" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="46" column="67" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="55" column="13" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="110" column="12" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="123" column="12" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="83" column="4" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="131" column="30" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="88" column="70" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="85" column="0" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="91" column="0" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="67" column="0" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="86" column="12" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="75" column="12" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="69" column="47" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="76" column="84" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="79" column="16" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="77" column="75" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="96" column="0" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="74" column="70" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="89" column="12" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="90" column="19" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="100" column="4" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="103" column="57" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="66" column="47" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="72" column="12" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="111" column="0" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="126" column="0" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="99" column="16" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="71" column="0" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="62" column="0" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="1" column="1" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="56" column="0" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="0" column="0" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="37" column="58" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="112" column="0" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="50" column="4" filename="$USER_HOME$/GraknLabs/grakn/common/producer/ProducerBuffer.java" />
      <jump line="145" column="20" filename="$USER_HOME$/GraknLabs/grakn/common/producer/ProducerBuffer.java" />
      <jump line="146" column="40" filename="$USER_HOME$/GraknLabs/grakn/common/producer/ProducerBuffer.java" />
      <jump line="127" column="16" filename="$USER_HOME$/GraknLabs/grakn/common/producer/ProducerBuffer.java" />
      <jump line="117" column="4" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="84" column="77" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="319" column="21" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="872" column="52" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="864" column="11" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="24" column="28" filename="$USER_HOME$/GraknLabs/grakn/test/behaviour/debug/debug.feature" />
      <jump line="891" column="42" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="20" column="0" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="19" column="12" filename="$USER_HOME$/GraknLabs/grakn/test/behaviour/debug/debug.feature" />
      <jump line="31" column="31" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="943" column="6" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="890" column="26" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="381" column="39" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="542" column="50" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="629" column="29" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="750" column="29" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="809" column="56" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="866" column="8" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="885" column="8" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="14" column="31" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="22" column="26" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="942" column="6" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="903" column="8" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="74" column="22" filename="$USER_HOME$/GraknLabs/grakn/test/behaviour/debug/debug.feature" />
      <jump line="14" column="31" filename="$USER_HOME$/GraknLabs/grakn/test/behaviour/debug/debug.feature" />
      <jump line="95" column="8" filename="$USER_HOME$/GraknLabs/grakn/test/behaviour/debug/debug.feature" />
      <jump line="77" column="8" filename="$USER_HOME$/GraknLabs/grakn/test/behaviour/debug/debug.feature" />
      <jump line="21" column="26" filename="$USER_HOME$/GraknLabs/grakn/test/behaviour/debug/debug.feature" />
      <jump line="109" column="8" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="118" column="0" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="39" column="58" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="88" column="68" filename="$USER_HOME$/GraknLabs/grakn/reasoner/Reasoner.java" />
      <jump line="87" column="90" filename="$USER_HOME$/GraknLabs/grakn/reasoner/Reasoner.java" />
      <jump line="90" column="38" filename="$USER_HOME$/GraknLabs/grakn/reasoner/Reasoner.java" />
      <jump line="873" column="22" filename="$USER_HOME$/GraknLabs/behaviour/graql/language/get.feature" />
      <jump line="89" column="0" filename="$USER_HOME$/GraknLabs/grakn/test/behaviour/debug/debug.feature" />
      <jump line="47" column="32" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="57" column="13" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="73" column="16" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="101" column="16" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="87" column="0" filename="$USER_HOME$/GraknLabs/grakn/traversal/producer/GraphProducer.java" />
      <jump line="72" column="26" filename="$USER_HOME$/GraknLabs/grakn/reasoner/Reasoner.java" />
      <jump line="74" column="53" filename="$USER_HOME$/GraknLabs/grakn/reasoner/Reasoner.java" />
      <jump line="67" column="56" filename="$USER_HOME$/GraknLabs/grakn/common/producer/ProducerBuffer.java" />
      <jump line="148" column="4" filename="$USER_HOME$/GraknLabs/grakn/common/producer/ProducerBuffer.java" />
      <jump line="100" column="57" filename="$USER_HOME$/GraknLabs/grakn/common/producer/ProducerBuffer.java" />
      <jump line="73" column="25" filename="$USER_HOME$/GraknLabs/grakn/reasoner/Reasoner.java" />
      <jump line="75" column="28" filename="$USER_HOME$/GraknLabs/grakn/reasoner/Reasoner.java" />
    </jumps>
  </component>
  <component name="VimRegisterSettings">
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64">ICAgICAgICB0aGlzLnV1aWQgPSBVVUlELnJhbmRvbVVVSUQoKTsK</text>
      </register>
      <register name="f" type="4">
        <text>_</text>
      </register>
      <register name="+" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="l" type="4">
        <text />
      </register>
      <register name="-" type="4">
        <text>;</text>
      </register>
      <register name="/" type="4">
        <text>put</text>
      </register>
      <register name="o" type="4">
        <keys>
          <key char="65535" code="91" mods="130" />
        </keys>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgIGlmIChwcm9jZWR1cmUudmVydGljZXMoKS5jb3VudCgpID09IDIpIHsKICAgICAgICAgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4odXVpZC50b1N0cmluZygpICsgIjogc2luayBwdXQiKTsKICAgICAgICAgICAgICAgIH0K</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgICAgICB0aGlzLnV1aWQgPSBVVUlELnJhbmRvbVVVSUQoKTsK</text>
      </register>
      <register name="q" type="4">
        <keys>
          <key char="102" code="0" mods="0" />
          <key char="95" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="58" code="0" mods="0" />
          <key char="65535" code="91" mods="130" />
          <key char="94" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
        </keys>
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgIHByaXZhdGUgZmluYWwgVVVJRCB1dWlkOwo=</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICBhc3MK</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICAgICAK</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgICAgICByZXR1cm4gbmV3Q2xvbmU7Cg==</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgICAgICAgICAgCg==</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgICAgICAgICAgYXNzZXJ0IGFuc3dlcnMuc2l6ZSgpID09IDk7Cg==</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ICAgICAgICAgICAgaW50IHggPSAwOwo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgICAgICBub3QgeyAkeSBpcyAkejsgfTsK</text>
      </register>
      <register name=":" type="4">
        <text>w</text>
      </register>
    </registers>
  </component>
  <component name="VimSearchSettings">
    <search>
      <last-search>put</last-search>
      <last-offset />
      <last-pattern>put</last-pattern>
      <last-replace>~</last-replace>
      <last-substitute encoding="base64">XDxzbmFwc2hvdFw+</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
  </component>
  <component name="VimSettings">
    <state version="6" enabled="true" />
    <notifications>
      <idea-join enabled="true" />
      <idea-put enabled="false" />
    </notifications>
  </component>
</application>