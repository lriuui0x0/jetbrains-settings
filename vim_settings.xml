<application>
  <component name="VimEditorSettings">
    <editor>
      <key-repeat enabled="true" />
    </editor>
  </component>
  <component name="VimHistorySettings">
    <history>
      <history-search>
        <entry>getContext</entry>
        <entry>parent</entry>
        <entry>owner</entry>
        <entry encoding="base64">XDxGdW5jdGlvblw+</entry>
        <entry encoding="base64">XDxleGVjdXRvclw+</entry>
        <entry encoding="base64">XDxzdGF0ZVw+</entry>
        <entry>state</entry>
        <entry>close</entry>
        <entry encoding="base64">XDxwcm90ZWN0ZWRcPg==</entry>
        <entry encoding="base64">XDxncmFrblNlcnZlckFjdG9yXD4=</entry>
        <entry encoding="base64">XDxpbml0XD4=</entry>
        <entry>thenWaitUntil</entry>
        <entry encoding="base64">XDxkYXRhYmFzZU1hbmFnZXJBY3Rvclw+</entry>
        <entry encoding="base64">XDxvcGVuXD4=</entry>
        <entry encoding="base64">XDxhY3RpdmF0ZVw+</entry>
        <entry>then</entry>
        <entry>try</entry>
        <entry encoding="base64">XDxsb29wXD4=</entry>
        <entry encoding="base64">XDxjb21tb25Qcm9taXNlRXhlY3V0b3JcPg==</entry>
        <entry encoding="base64">XDxzbGVlcFw+</entry>
      </history-search>
      <history-cmd>
        <entry>wjj:w</entry>
        <entry encoding="base64">JzwsJz4=</entry>
        <entry>wo</entry>
        <entry>w\jjb</entry>
        <entry>wbhb</entry>
        <entry>v</entry>
        <entry>W</entry>
        <entry>w:q</entry>
        <entry>ww</entry>
        <entry encoding="base64">JzwsJz53</entry>
        <entry>:w</entry>
        <entry>w\</entry>
        <entry>w:w</entry>
        <entry>s</entry>
        <entry>wi</entry>
        <entry>q\</entry>
        <entry>;w</entry>
        <entry>vs</entry>
        <entry>q</entry>
        <entry>w</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
  </component>
  <component name="VimKeySettings">
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed J</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed K</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed L</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>shift ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>shift ctrl pressed 6</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed SEMICOLON</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>shift ctrl pressed SEMICOLON</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed J</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed BACK_SPACE</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed Z</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed COMMA</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>alt pressed L</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
  <component name="VimMarksSettings">
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/PromiseExecutor.java" timestamp="1601913092570">
        <mark key="'" line="7" column="33" />
        <mark key="[" line="7" column="0" />
        <mark key="]" line="7" column="22" />
        <mark key="." line="7" column="0" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/server/components/storage/RocksData.java" timestamp="1601903978127">
        <mark key="'" line="518" column="0" />
        <mark key="[" line="35" column="4" />
        <mark key="]" line="35" column="10" />
        <mark key="." line="35" column="9" />
        <mark key="^" line="35" column="10" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/TransactionManager.java" timestamp="1601915440762">
        <mark key="'" line="25" column="190" />
        <mark key="[" line="25" column="4" />
        <mark key="]" line="25" column="10" />
        <mark key="^" line="25" column="10" />
        <mark key="." line="25" column="9" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/test/ActorTest.java" timestamp="1601974673687">
        <mark key="'" line="36" column="0" />
        <mark key="[" line="44" column="80" />
        <mark key="]" line="44" column="85" />
        <mark key="." line="44" column="84" />
        <mark key="^" line="44" column="85" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Data.java" timestamp="1601912684985">
        <mark key="'" line="22" column="49" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/EventLoopPromiseExecutor.java" timestamp="1601913821961">
        <mark key="'" line="38" column="19" />
        <mark key="[" line="38" column="26" />
        <mark key="]" line="38" column="26" />
        <mark key="." line="38" column="26" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/server/GraknServer.java" timestamp="1601915423930">
        <mark key="'" line="72" column="4" />
        <mark key="^" line="2" column="63" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" timestamp="1601913106631" />
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/ActorPeriodicTask.java" timestamp="1601973790595">
        <mark key="'" line="7" column="0" />
        <mark key="[" line="8" column="32" />
        <mark key="]" line="8" column="32" />
        <mark key="^" line="8" column="32" />
        <mark key="." line="8" column="31" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/testkit/TestState.java" timestamp="1601974656499">
        <mark key="'" line="18" column="35" />
        <mark key="[" line="7" column="4" />
        <mark key="]" line="7" column="10" />
        <mark key="." line="7" column="9" />
        <mark key="^" line="7" column="10" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grabl/local/grabl.env" timestamp="1601906899325">
        <mark key="[" line="9" column="0" />
        <mark key="]" line="10" column="93" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/BUILD" timestamp="1601973941844">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="10" column="1" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/server/components/storage/RocksStorageManager.java" timestamp="1601904030657">
        <mark key="'" line="145" column="0" />
        <mark key="[" line="23" column="4" />
        <mark key="]" line="23" column="10" />
        <mark key="." line="23" column="9" />
        <mark key="^" line="23" column="10" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Peers.java" timestamp="1601974461143">
        <mark key="'" line="202" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="200" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Raft.java" timestamp="1601974507901">
        <mark key="'" line="677" column="24" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="745" column="1" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/DatabaseManager.java" timestamp="1601913120905">
        <mark key="'" line="5" column="0" />
        <mark key="[" line="38" column="18" />
        <mark key="]" line="38" column="19" />
        <mark key="." line="38" column="18" />
        <mark key="^" line="38" column="19" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Promise.java" timestamp="1601913707736">
        <mark key="'" line="167" column="8" />
      </file>
      <file name="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" timestamp="1601973732632">
        <mark key="'" line="60" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="62" column="1" />
        <mark key="." line="0" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="36" column="13" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="37" column="36" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="30" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="52" column="4" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="48" column="71" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="72" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="73" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="49" column="84" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="54" column="116" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="67" column="17" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="61" column="28" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="37" column="62" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/DatabaseManager.java" />
      <jump line="35" column="148" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/DatabaseManager.java" />
      <jump line="38" column="17" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/DatabaseManager.java" />
      <jump line="34" column="21" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/DatabaseManager.java" />
      <jump line="24" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Data.java" />
      <jump line="31" column="205" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/TransactionManager.java" />
      <jump line="60" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="26" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Peers.java" />
      <jump line="34" column="44" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Peers.java" />
      <jump line="69" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Peers.java" />
      <jump line="201" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Peers.java" />
      <jump line="44" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Raft.java" />
      <jump line="745" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Raft.java" />
      <jump line="28" column="11" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Peers.java" />
      <jump line="36" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Peers.java" />
      <jump line="42" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Raft.java" />
      <jump line="743" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Raft.java" />
      <jump line="43" column="87" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/TransactionManager.java" />
      <jump line="27" column="191" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/TransactionManager.java" />
      <jump line="34" column="23" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/TransactionManager.java" />
      <jump line="40" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/TransactionManager.java" />
      <jump line="57" column="49" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="201" column="24" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Raft.java" />
      <jump line="69" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="75" column="8" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="19" column="20" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="39" column="16" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Raft.java" />
      <jump line="40" column="14" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Raft.java" />
      <jump line="108" column="24" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Raft.java" />
      <jump line="110" column="43" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Raft.java" />
      <jump line="22" column="49" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Data.java" />
      <jump line="23" column="4" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="7" column="59" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="56" column="4" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="59" column="67" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="5" column="34" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/PromiseExecutor.java" />
      <jump line="7" column="33" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/PromiseExecutor.java" />
      <jump line="47" column="53" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="42" column="33" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/Database.java" />
      <jump line="13" column="27" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/DatabaseManager.java" />
      <jump line="5" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/DatabaseManager.java" />
      <jump line="54" column="60" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/EventLoopPromiseExecutor.java" />
      <jump line="65" column="4" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/EventLoopPromiseExecutor.java" />
      <jump line="39" column="19" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/EventLoopPromiseExecutor.java" />
      <jump line="8" column="74" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/EventLoopPromiseExecutor.java" />
      <jump line="66" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/EventLoopPromiseExecutor.java" />
      <jump line="54" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="13" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="62" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="52" column="4" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/EventLoopPromiseExecutor.java" />
      <jump line="62" column="12" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Promise.java" />
      <jump line="107" column="23" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Promise.java" />
      <jump line="167" column="8" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Promise.java" />
      <jump line="38" column="19" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/EventLoopPromiseExecutor.java" />
      <jump line="48" column="4" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="46" column="50" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="34" column="52" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="74" column="46" filename="$USER_HOME$/GraknLabs/grakn-cluster/server/GraknServer.java" />
      <jump line="71" column="101" filename="$USER_HOME$/GraknLabs/grakn-cluster/server/GraknServer.java" />
      <jump line="83" column="4" filename="$USER_HOME$/GraknLabs/grakn-cluster/server/GraknServer.java" />
      <jump line="32" column="4" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/TransactionManager.java" />
      <jump line="25" column="190" filename="$USER_HOME$/GraknLabs/grakn-cluster/distributed/core/TransactionManager.java" />
      <jump line="28" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="6" column="45" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="14" column="4" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="0" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="3" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="60" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/Actor.java" />
      <jump line="8" column="57" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/ActorPeriodicTask.java" />
      <jump line="67" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/ActorPeriodicTask.java" />
      <jump line="7" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/ActorPeriodicTask.java" />
      <jump line="11" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/BUILD" />
      <jump line="0" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/BUILD" />
      <jump line="76" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/test/ActorTest.java" />
      <jump line="39" column="8" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/test/ActorTest.java" />
      <jump line="0" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/test/ActorTest.java" />
      <jump line="105" column="24" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/test/ActorTest.java" />
      <jump line="107" column="19" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/test/ActorTest.java" />
      <jump line="33" column="15" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/test/ActorTest.java" />
      <jump line="56" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/test/ActorTest.java" />
      <jump line="113" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/test/ActorTest.java" />
      <jump line="36" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/actor/test/ActorTest.java" />
      <jump line="32" column="46" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Peers.java" />
      <jump line="0" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Peers.java" />
      <jump line="202" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Peers.java" />
      <jump line="109" column="55" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Raft.java" />
      <jump line="0" column="0" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Raft.java" />
      <jump line="333" column="12" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Raft.java" />
      <jump line="677" column="24" filename="$USER_HOME$/GraknLabs/grakn-cluster/concurrent/raft/Raft.java" />
    </jumps>
  </component>
  <component name="VimRegisterSettings">
    <registers>
      <register name="&quot;" type="4">
        <text>TestState::new</text>
      </register>
      <register name="+" type="2">
        <text encoding="base64">amF2YV9saWJyYXJ5KAogICAgbmFtZSA9ICJsaWIiLAogICAgc3JjcyA9IGdsb2IoWyIqLmphdmEiXSksCiAgICBkZXBzID0gWwogICAgICAgICIvL2NvbW1vbjpsaWIiLAogICAgICAgICJAbWF2ZW4vLzpjb21fZ29vZ2xlX2NvZGVfZmluZGJ1Z3NfanNyMzA1IiwKICAgICAgICAiQG1hdmVuLy86b3JnX3NsZjRqX3NsZjRqX2FwaSIsCiAgICBdLAogICAgdmlzaWJpbGl0eSA9IFsiLy92aXNpYmlsaXR5OnB1YmxpYyJdLAogICAgdGFncyA9IFsibWF2ZW5fY29vcmRpbmF0ZXM9aW8uZ3Jha24uY2x1c3Rlcjpjb25jdXJyZW50LWFjdG9yLWxpYjp7cG9tX3ZlcnNpb259Il0KKQo=</text>
      </register>
      <register name="l" type="4">
        <text>a</text>
      </register>
      <register name="-" type="4">
        <text>TestState::new</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxzbGVlcFw+</text>
      </register>
      <register name="o" type="4">
        <keys>
          <key char="65535" code="91" mods="130" />
        </keys>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgICAgICBBY3RvcjxUZXN0U3RhdGU+IHJvb3QgPSBBY3Rvci5yb290KHJvb3RMb29wLCBUZXN0U3RhdGU6Om5ldyk7Cg==</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="q" type="4">
        <keys>
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="65535" code="65" mods="130" />
          <key char="94" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
        </keys>
      </register>
      <register name="2" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">cGFja2FnZSBncmFrbi5jbHVzdGVyLmNvbmN1cnJlbnQuYWN0b3I7CgppbXBvcnQgZ3Jha24uY2x1c3Rlci5jb25jdXJyZW50LmFjdG9yLnRlc3RraXQuVGVzdFN0YXRlOwppbXBvcnQgb3JnLmp1bml0LkJlZm9yZTsKaW1wb3J0IG9yZy5qdW5pdC5UZXN0OwoKaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7CmltcG9ydCBqYXZhLnV0aWwuTGlzdDsKaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkJsb2NraW5nUXVldWU7CmltcG9ydCBqYXZhLnV0aWwuY29uY3VycmVudC5MaW5rZWRCbG9ja2luZ1F1ZXVlOwppbXBvcnQgamF2YS51dGlsLmNvbmN1cnJlbnQuVGhyZWFkRmFjdG9yeTsKaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LmF0b21pYy5BdG9taWNJbnRlZ2VyOwoKaW1wb3J0IHN0YXRpYyBvcmcuanVuaXQuQXNzZXJ0LmFzc2VydEVxdWFsczsKCnB1YmxpYyBjbGFzcyBBY3RvclRlc3QgewogICAgcHJpdmF0ZSBCbG9ja2luZ1F1ZXVlPFN0cmluZz4gcmVzdWx0czsKCiAgICBAQmVmb3JlCiAgICBwdWJsaWMgdm9pZCBzZXR1cCgpIHsKICAgICAgICByZXN1bHRzID0gbmV3IExpbmtlZEJsb2NraW5nUXVldWU8PigpOwogICAgfQoKICAgIEBUZXN0CiAgICBwdWJsaWMgdm9pZCBwZXJpb2RpY1Rhc2tfbXVzdE5vdEJlSW52b2tlZElmSXRJc1N0b3BwZWRCZWZvcmVUaGVUaW1lb3V0SGFzRWxhcHNlZCgpIHRocm93cyBJbnRlcnJ1cHRlZEV4Y2VwdGlvbiB7CiAgICAgICAgU2luZ2xlVGhyZWFkZWRFdmVudExvb3BQcm9taXNlRXhlY3V0b3Igcm9vdExvb3AgPSBTaW5nbGVUaHJlYWRlZEV2ZW50TG9vcFByb21pc2VFeGVjdXRvci5zdGFydChuYW1lZFRocmVhZEZhY3RvcnkoInJvb3RMb29wIikpOwogICAgICAgIEFjdG9yPFRlc3RTdGF0ZT4gcm9vdCA9IEFjdG9yLnJvb3Qocm9vdExvb3AsIFRlc3RTdGF0ZTo6bmV3KTsKICAgICAgICBBdG9taWNJbnRlZ2VyIGNvdW50ID0gbmV3IEF0b21pY0ludGVnZXIoKTsKICAgICAgICBBY3RvclBlcmlvZGljVGFzazxUZXN0U3RhdGU+IHBlcmlvZGljVGFzayA9IG5ldyBBY3RvclBlcmlvZGljVGFzazw+KHJvb3QsIDEwMDAsIDAsIG1zZyAtPiB7CiAgICAgICAgICAgIGNvdW50LmluY3JlbWVudEFuZEdldCgpOwogICAgICAgIH0pOwogICAgICAgIHBlcmlvZGljVGFzay5vbmNlKCk7CiAgICAgICAgcGVyaW9kaWNUYXNrLnN0b3AoKTsKICAgICAgICBUaHJlYWQuc2xlZXAoMTUwMCk7CiAgICAgICAgYXNzZXJ0RXF1YWxzKDAsIGNvdW50LmdldCgpKTsKICAgIH0KCiAgICBAVGVzdAogICAgcHVibGljIHZvaWQgdGVzdEFjdG9ycygpIHRocm93cyBJbnRlcnJ1cHRlZEV4Y2VwdGlvbiB7CiAgICAgICAgU2luZ2xlVGhyZWFkZWRFdmVudExvb3BQcm9taXNlRXhlY3V0b3Igcm9vdExvb3AgPSBTaW5nbGVUaHJlYWRlZEV2ZW50TG9vcFByb21pc2VFeGVjdXRvci5zdGFydChuYW1lZFRocmVhZEZhY3RvcnkoInJvb3RMb29wIikpOwogICAgICAgIFNpbmdsZVRocmVhZGVkRXZlbnRMb29wUHJvbWlzZUV4ZWN1dG9yIHNlc3Npb25Mb29wID0gU2luZ2xlVGhyZWFkZWRFdmVudExvb3BQcm9taXNlRXhlY3V0b3Iuc3RhcnQobmFtZWRUaHJlYWRGYWN0b3J5KCJzZXNzaW9uTG9vcCIpKTsKICAgICAgICBTaW5nbGVUaHJlYWRlZEV2ZW50TG9vcFByb21pc2VFeGVjdXRvciB0eExvb3AgPSBTaW5nbGVUaHJlYWRlZEV2ZW50TG9vcFByb21pc2VFeGVjdXRvci5zdGFydChuYW1lZFRocmVhZEZhY3RvcnkoInR4TG9vcCIpKTsKCiAgICAgICAgUHJvbWlzZS5kZWZlcihyb290TG9vcCwgKCkgLT4gewogICAgICAgICAgICBBY3RvcjxUZXN0U3RhdGU+IHJvb3QgPSBBY3Rvci5yb290KHJvb3RMb29wLCBUZXN0U3RhdGU6Om5ldyk7CiAgICAgICAgICAgIHJvb3QuYXNrKHN0YXRlIC0+IHN0YXRlLjxTZXNzaW9uPmNoaWxkKHNlc3Npb25BY3RvciAtPiBuZXcgU2Vzc2lvbihzZXNzaW9uQWN0b3IsIHNlc3Npb25Mb29wKSkpLnRoZW4oc2Vzc2lvbkFjdG9yIC0+IHsKICAgICAgICAgICAgICAgIFByb21pc2U8QWN0b3I8VHJhbnNhY3Rpb24+PiB0eEFjdG9yUHJvbWlzZSA9IHNlc3Npb25BY3Rvci53YWl0Rm9yKGEgLT4gYS5vcGVuVHJhbnNhY3Rpb24oc2Vzc2lvbkFjdG9yLCAidHgiKSk7CiAgICAgICAgICAgICAgICB0eEFjdG9yUHJvbWlzZS50aGVuRGVmZXIodHggLT4gdHguYXNrKFRyYW5zYWN0aW9uOjpnZXROYW1lKS50aGVuRGVmZXIocmVzdWx0czo6YWRkKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHhBY3RvclByb21pc2U7CiAgICAgICAgICAgIH0pLnRoZW5EZWZlcih0eEFjdG9yUHJvbWlzZSAtPiB7CiAgICAgICAgICAgICAgICB0eEFjdG9yUHJvbWlzZS50aGVuRGVmZXIodHggLT4gewogICAgICAgICAgICAgICAgICAgIHR4LmFzayhUcmFuc2FjdGlvbjo6Z2V0TmFtZSkudGhlbkRlZmVyKHJlc3VsdHM6OmFkZCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIHNsZWVwKDEwMCk7CgogICAgICAgIHJvb3RMb29wLnN0b3AoKTsKICAgICAgICBzZXNzaW9uTG9vcC5zdG9wKCk7CiAgICAgICAgdHhMb29wLnN0b3AoKTsKCiAgICAgICAgYXNzZXJ0RXF1YWxzKDIsIHJlc3VsdHMuc2l6ZSgpKTsKICAgIH0KCiAgICBwcml2YXRlIHN0YXRpYyBjbGFzcyBTZXNzaW9uIGV4dGVuZHMgQWN0b3IuU3RhdGU8U2Vzc2lvbj4gewogICAgICAgIHByaXZhdGUgZmluYWwgU2luZ2xlVGhyZWFkZWRFdmVudExvb3BQcm9taXNlRXhlY3V0b3IgdHhMb29wOwogICAgICAgIHByaXZhdGUgZmluYWwgTGlzdDxBY3RvcjxUcmFuc2FjdGlvbj4+IHRyYW5zYWN0aW9ucyA9IG5ldyBBcnJheUxpc3Q8PigpOwoKICAgICAgICBwcml2YXRlIFNlc3Npb24oQWN0b3I8U2Vzc2lvbj4gc2VsZiwgU2luZ2xlVGhyZWFkZWRFdmVudExvb3BQcm9taXNlRXhlY3V0b3IgdHhMb29wKSB7CiAgICAgICAgICAgIHN1cGVyKHNlbGYpOwogICAgICAgICAgICB0aGlzLnR4TG9vcCA9IHR4TG9vcDsKICAgICAgICB9CgogICAgICAgIHB1YmxpYyBQcm9taXNlPEFjdG9yPFRyYW5zYWN0aW9uPj4gb3BlblRyYW5zYWN0aW9uKEFjdG9yPFNlc3Npb24+IGFjdG9yLCBTdHJpbmcgbmFtZSkgewogICAgICAgICAgICByZXR1cm4gYWN0b3IuYXNrKHNlc3Npb24gLT4gc2Vzc2lvbi48VHJhbnNhY3Rpb24+Y2hpbGQodHhBY3RvciAtPiBuZXcgVHJhbnNhY3Rpb24odHhBY3RvciwgbmFtZSkpKS50aGVuKHR4QWN0b3IgLT4gewogICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25zLmFkZCh0eEFjdG9yKTsKICAgICAgICAgICAgICAgIHJldHVybiB0eEFjdG9yOwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9CgogICAgcHJpdmF0ZSBzdGF0aWMgY2xhc3MgVHJhbnNhY3Rpb24gZXh0ZW5kcyBBY3Rvci5TdGF0ZTxUcmFuc2FjdGlvbj4gewogICAgICAgIHByaXZhdGUgZmluYWwgU3RyaW5nIG5hbWU7CgogICAgICAgIHByaXZhdGUgVHJhbnNhY3Rpb24oQWN0b3I8VHJhbnNhY3Rpb24+IHNlbGYsIFN0cmluZyBuYW1lKSB7CiAgICAgICAgICAgIHN1cGVyKHNlbGYpOwogICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lOwogICAgICAgIH0KCiAgICAgICAgcHVibGljIFN0cmluZyBnZXROYW1lKCkgewogICAgICAgICAgICByZXR1cm4gbmFtZTsKICAgICAgICB9CiAgICB9CgogICAgcHJpdmF0ZSBzdGF0aWMgVGhyZWFkRmFjdG9yeSBuYW1lZFRocmVhZEZhY3RvcnkoU3RyaW5nIG5hbWUpIHsKICAgICAgICByZXR1cm4gciAtPiBuYW1lZFRocmVhZChuYW1lLCByKTsKICAgIH0KCiAgICBwcml2YXRlIHN0YXRpYyBUaHJlYWQgbmFtZWRUaHJlYWQoU3RyaW5nIG5hbWUsIFJ1bm5hYmxlIHIpIHsKICAgICAgICBUaHJlYWQgdGhyZWFkID0gbmV3IFRocmVhZChyKTsKICAgICAgICB0aHJlYWQuc2V0TmFtZShuYW1lKTsKICAgICAgICByZXR1cm4gdGhyZWFkOwogICAgfQoKICAgIHByaXZhdGUgc3RhdGljIHZvaWQgc2xlZXAobG9uZyBtaWxsaXMpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBUaHJlYWQuc2xlZXAobWlsbGlzKTsKICAgICAgICB9IGNhdGNoIChJbnRlcnJ1cHRlZEV4Y2VwdGlvbiBlKSB7CiAgICAgICAgICAgIFRocmVhZC5jdXJyZW50VGhyZWFkKCkuaW50ZXJydXB0KCk7CiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKGUpOwogICAgICAgIH0KICAgIH0KfQo=</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgICAgICAgICAgQWN0b3I8U3RyaW5nPiByb290ID0gbmV3IEFjdG9yPD4ocm9vdExvb3AsICJyb290Iik7Cg==</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgICAgICBBY3RvcjxTdHJpbmc+IHJvb3QgPSBuZXcgQWN0b3I8Pihyb290TG9vcCwgInJvb3QiKTsK</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgICAgICBBY3Rvcgo=</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgICAgICAK</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">cGFja2FnZSBncmFrbi5jbHVzdGVyLmNvbmN1cnJlbnQuYWN0b3I7CgppbXBvcnQgamF2YXguYW5ub3RhdGlvbi5DaGVja1JldHVyblZhbHVlOwppbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLkNvbnN1bWVyOwppbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLkZ1bmN0aW9uOwppbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLlN1cHBsaWVyOwoKcHVibGljIGNsYXNzIEFjdG9yPEE+IHsKICAgIHByaXZhdGUgZmluYWwgUHJvbWlzZUV4ZWN1dG9yIGV4ZWN1dG9yOwogICAgcHJpdmF0ZSBmaW5hbCBBIGluc3RhbmNlOwoKICAgIHB1YmxpYyBBY3RvcihQcm9taXNlRXhlY3V0b3IgZXhlY3V0b3IsIEEgaW5zdGFuY2UpIHsKICAgICAgICB0aGlzLmV4ZWN1dG9yID0gZXhlY3V0b3I7CiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlOwogICAgfQoKICAgIHB1YmxpYyBzdGF0aWMgPEE+IEFjdG9yPEE+IGNyZWF0ZShQcm9taXNlRXhlY3V0b3IgZXhlY3V0b3IsIEEgaW5zdGFuY2UpIHsKICAgICAgICByZXR1cm4gbmV3IEFjdG9yPD4oZXhlY3V0b3IsIGluc3RhbmNlKTsKICAgIH0KCiAgICBwdWJsaWMgc3RhdGljIDxBPiBQcm9taXNlPEFjdG9yPEE+PiBjcmVhdGUoUHJvbWlzZUV4ZWN1dG9yIGV4ZWN1dG9yLCBTdXBwbGllcjxBPiBjb25zdHJ1Y3RvcikgewogICAgICAgIHJldHVybiBQcm9taXNlLmdldChleGVjdXRvciwgKCkgLT4gbmV3IEFjdG9yPD4oZXhlY3V0b3IsIGNvbnN0cnVjdG9yLmdldCgpKSk7CiAgICB9CgogICAgcHVibGljIFByb21pc2VFeGVjdXRvci5UaW1lZEV2ZW50IHRpbWVkVGFzayhsb25nIG1pbGxpcywgQ29uc3VtZXI8QT4gaGFuZGxlcikgewogICAgICAgIHJldHVybiBleGVjdXRvci5leGVjdXRlKG1pbGxpcywgKCkgLT4gaGFuZGxlci5hY2NlcHQoaW5zdGFuY2UpKTsKICAgIH0KCiAgICBAQ2hlY2tSZXR1cm5WYWx1ZQogICAgcHVibGljIDxWPiBQcm9taXNlPFY+IHdhaXRGb3IoRnVuY3Rpb248QSwgUHJvbWlzZTxWPj4gaGFuZGxlcikgewogICAgICAgIHJldHVybiBQcm9taXNlLndhaXRGb3IoZXhlY3V0b3IsICgpIC0+IGhhbmRsZXIuYXBwbHkoaW5zdGFuY2UpKTsKICAgIH0KCiAgICBAQ2hlY2tSZXR1cm5WYWx1ZQogICAgcHVibGljIDxWPiBQcm9taXNlPFY+IGFzayhGdW5jdGlvbjxBLCBWPiBoYW5kbGVyKSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UuZ2V0KGV4ZWN1dG9yLCAoKSAtPiBoYW5kbGVyLmFwcGx5KGluc3RhbmNlKSk7CiAgICB9CgogICAgQENoZWNrUmV0dXJuVmFsdWUKICAgIHB1YmxpYyBQcm9taXNlPFZvaWQ+IHJ1bihDb25zdW1lcjxBPiBoYW5kbGVyKSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UucnVuKGV4ZWN1dG9yLCAoKSAtPiBoYW5kbGVyLmFjY2VwdChpbnN0YW5jZSkpOwogICAgfQoKICAgIHB1YmxpYyB2b2lkIHRlbGwoQ29uc3VtZXI8QT4gaGFuZGxlcikgewogICAgICAgIFByb21pc2UuZGVmZXIoZXhlY3V0b3IsICgpIC0+IGhhbmRsZXIuYWNjZXB0KGluc3RhbmNlKSk7CiAgICB9CgogICAgcHVibGljIDxTPiBQcm9taXNlPEFjdG9yPFM+PiBjaGlsZChTdXBwbGllcjxTPiBjb25zdHJ1Y3RvcikgewogICAgICAgIHJldHVybiBjaGlsZChleGVjdXRvciwgY29uc3RydWN0b3IpOwogICAgfQoKICAgIHB1YmxpYyA8Uz4gUHJvbWlzZTxBY3RvcjxTPj4gY2hpbGQoUHJvbWlzZUV4ZWN1dG9yIGV4ZWN1dG9yLCBTdXBwbGllcjxTPiBjb25zdHJ1Y3RvcikgewogICAgICAgIHJldHVybiBQcm9taXNlLndhaXRGb3IodGhpcy5leGVjdXRvciwgKCkgLT4gUHJvbWlzZS5nZXQoZXhlY3V0b3IsICgpIC0+IG5ldyBBY3Rvcjw+KGV4ZWN1dG9yLCBjb25zdHJ1Y3Rvci5nZXQoKSkpKTsKICAgIH0KfQo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgIGJvb2xlYW4gaXNMb2NhbCgpOwo=</text>
      </register>
      <register name=":" type="4">
        <text>w</text>
      </register>
    </registers>
  </component>
  <component name="VimSearchSettings">
    <search>
      <last-search encoding="base64">XDxzbGVlcFw+</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxzbGVlcFw+</last-pattern>
      <last-replace>page</last-replace>
      <last-substitute>reference-type</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
  </component>
  <component name="VimSettings">
    <state version="6" enabled="true" />
    <notifications>
      <idea-join enabled="true" />
      <idea-put enabled="false" />
    </notifications>
  </component>
</application>